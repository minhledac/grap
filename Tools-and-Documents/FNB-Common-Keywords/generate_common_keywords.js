//const http = require('http');
//const url = require('url');
//const querystring = require('querystring');
const fs = require('fs');
const readline = require('readline');
const {google} = require('googleapis');

// If modifying these scopes, delete token.json.
const SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly'];
// The file token.json stores the user's access and refresh tokens, and is
// created automatically when the authorization flow completes for the first
// time.
const TOKEN_PATH = 'token.json';

/**
 * Create an OAuth2 client with the given credentials, and then execute the
 * given callback function.
 * @param {Object} credentials The authorization client credentials.
 * @param {function} callback The callback to call with the authorized client.
 */
function authorize(credentials, callback) {
  const {client_secret, client_id, redirect_uris} = credentials.installed;
  const oAuth2Client = new google.auth.OAuth2(
      client_id, client_secret, redirect_uris[0]);

  // Check if we have previously stored a token.
  fs.readFile(TOKEN_PATH, (err, token) => {
    if (err) return getNewToken(oAuth2Client, callback);
    oAuth2Client.setCredentials(JSON.parse(token));
    callback(oAuth2Client);
  });
}

/**
 * Get and store new token after prompting for user authorization, and then
 * execute the given callback with the authorized OAuth2 client.
 * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.
 * @param {getEventsCallback} callback The callback for the authorized client.
 */
function getNewToken(oAuth2Client, callback) {
  const authUrl = oAuth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: SCOPES,
  });
  console.log('Authorize this app by visiting this url:', authUrl);
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  rl.question('Enter the code from that page here: ', (code) => {
    rl.close();
    oAuth2Client.getToken(code, (err, token) => {
      if (err) return console.error('Error while trying to retrieve access token', err);
      oAuth2Client.setCredentials(token);
      // Store the token to disk for later program executions
      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {
        if (err) return console.error(err);
        console.log('Token stored to', TOKEN_PATH);
      });
      callback(oAuth2Client);
    });
  });
}

var prefix_str = 'FNB AND ';
class FILE {
    constructor(_name) {
        this.name = _name;
        this.content = "";
    }

    write(string){
        this.content+=string;
    }
}

/**
 * Prints the names and majors of students in a sample spreadsheet:
 * @see https://docs.google.com/spreadsheets/d/1n7u1dkqY3l4rL9ZoukCrPNmBpmDUs1f52wsH5--41Ws/edit
 * @param {google.auth.OAuth2} auth The authenticated Google OAuth client.
 */
function updateFnbElements(auth) {
  const sheets = google.sheets({version: 'v4', auth});
  var fnb_elements = [];
  var sheet_count = 0;
  sheets.spreadsheets.get({
        spreadsheetId: '1n7u1dkqY3l4rL9ZoukCrPNmBpmDUs1f52wsH5--41Ws'
    }).then(function(res) {
        sheet_count = res.data.sheets.length;
        for(var attr in res.data.sheets)
        {
            var title = res.data.sheets[attr].properties.title;
            if(title.startsWith('_'))
            {
                sheet_count--;
                continue;
            }
            console.log('Get sheet: ' + title);

            sheets.spreadsheets.values.get({
                    spreadsheetId: '1n7u1dkqY3l4rL9ZoukCrPNmBpmDUs1f52wsH5--41Ws',
                    range: title+'!A1:P',
                }, (err, res) => {
                if (err) return console.log('The API returned an error: ' + err);
                    const rows = res.data.values;
                var screen_name = res.data.range.split('!')[0];
                if (rows.length) {
                    var generated_file = new FILE("../../core/_common_keywords/common_" + screen_name + "_screen.robot");
                    generated_file.write("*** Settings ***")
                    generated_file.write('\r\nDocumentation     A resource file with reusable keywords and variables.')
                    generated_file.write('\r\n...')
                    generated_file.write('\r\n...               ====================================================')
                    generated_file.write('\r\n...               Generated by update_common_keyworks.py - DO NOT EDIT')
                    generated_file.write('\r\n...               ====================================================')
                    generated_file.write('\r\n...')
                    generated_file.write('\r\nLibrary           AppiumLibrary')
                    generated_file.write('\r\nResource          ../../core/share/utils.robot')
                    generated_file.write('\r\n')
                    generated_file.write('\r\n*** Keywords ***')
                    //Get header column
                    var id_col = GetCollum(rows[0], 'ID');
                    var locator_col = GetCollum(rows[0], 'Locator');
                    var type_col = GetCollum(rows[0], 'Type');
                    var index_extract_col = GetCollum(rows[0], 'Index extract');
                    var lang_vi_col = GetCollum(rows[0], 'Vi');
                    var lang_en_col = GetCollum(rows[0], 'En');
                    var param_1_col = GetCollum(rows[0], 'Param name 1');
                    var convert_case_1_col = GetCollum(rows[0], 'Convert Case 1');
                    var param_2_col = GetCollum(rows[0], 'Param name 2');
                    var convert_case_2_col = GetCollum(rows[0], 'Convert Case 2');
                    var module_id_col = GetCollum(rows[0], 'Module ID');
                    var prepare_kws_col = GetCollum(rows[0], 'Prepare KWs');

                    rows.map((row) => {
                        if(str(row[id_col])!='ID')
                        {
                            ProcessRowData(row, id_col, locator_col, type_col, index_extract_col, lang_vi_col, lang_en_col, param_1_col, convert_case_1_col, param_2_col, convert_case_2_col, module_id_col, prepare_kws_col, generated_file)
                        }
                    });


                    fs.writeFile(generated_file.name, generated_file.content, function(err) {
                        sheet_count--;
                        if(err) {
                            console.log(err);
                        }
                        else{
                            console.log("\x1b[0m    *Generated file "+generated_file.name+"!");
                        }
                        if(sheet_count==0)
                        {
                            console.log("\x1b[32mDone!");
                            for(var w =0; w < warning_list.length; w++){
                                console.log(warning_list[w]);
                            }
                            var show_error = false;
                            for(var kw in kw_dict){
                                if(kw_dict[kw]>1){
                                    if(!show_error)
                                    {
                                        show_error = true;
                                        console.error('\x1b[31m Error! Keyword(s) with same name defined multiple times:');
                                    }
                                    console.error('\x1b[33m    ' + kw);
                                }
                            }
                            console.error('\x1b[0m');
                            if(show_error || warning_list.length > 0)
                            {
                                console.log('Press any key to exit!');
                                process.stdin.setRawMode(true);
                                process.stdin.resume();
                                process.stdin.on('data', process.exit.bind(process, 0));
                            }
                            else{
                                  var P = ["\\", "|", "/", "-"];
                                  var n = Date.now();
                                  for(var t = 0;t < 2;t ++)
                                  {
                                      setTimeout(() => {  process.stdout.write("\rExit in " + parseInt(3-(Date.now() - n)/1000) + ' s' + P[0]); }, 1000*t + 250*0);
                                      setTimeout(() => {  process.stdout.write("\rExit in " + parseInt(3-(Date.now() - n)/1000) + ' s' + P[1]); }, 1000*t + 250*1);
                                      setTimeout(() => {  process.stdout.write("\rExit in " + parseInt(3-(Date.now() - n)/1000) + ' s' + P[2]); }, 1000*t + 250*2);
                                      setTimeout(() => {  process.stdout.write("\rExit in " + parseInt(3-(Date.now() - n)/1000) + ' s' + P[3]); }, 1000*t + 250*3);
                                  }
                            }
                        }
                    });

                } else {
                  console.log('\x1b[31m No data found.');
                }
            });
        }
    }, function(response) {
        console.log('Error: ' + response.result.error.message);
    });
}

function str(value){
    return value==undefined?'':value.toString();
}

function GetCollum(first_row, _col_name){
    for(var col=0;col<first_row.length;col++)
    {
        var cell_value = first_row[col];
        if(cell_value == _col_name)
            return col;
    }
    return -1
}

function InjectCodeCheckLanguage(_lang_vi_str, _lang_en_str, _generated_file)
{
    if(_lang_vi_str != '')
        _generated_file.write('\r\n    ${lang_str}    KV Get Language Text    ' + _lang_vi_str + '    ' + (_lang_en_str==''?'None':_lang_en_str));
}

function InjectCodeInsertParam(_lang_vi_str, _param_1_str, _convert_case_1_str, _param_2_str, _convert_case_2_str, _generated_file, is_fake_checkbox = false)
{
    var format_args = '';
    if(_lang_vi_str != '')
        format_args += '    ${lang_str}';
    if(_convert_case_1_str != '')
    {
        if(_convert_case_1_str == 'Uppercase')
            _generated_file.write('\r\n    ${'+_param_1_str+'}    Convert To Uppercase    ${'+_param_1_str+'}')
        else
            _generated_file.write('\r\n    ${'+_param_1_str+'}    Convert To Lowercase    ${'+_param_1_str+'}')
    }
    if(_convert_case_2_str != '')
    {
        if(_convert_case_2_str == 'Uppercase')
            _generated_file.write('\r\n    ${'+_param_2_str+'}    Convert To Uppercase    ${'+_param_2_str+'}')
        else
            _generated_file.write('\r\n    ${'+_param_2_str+'}    Convert To Lowercase    ${'+_param_2_str+'}')
    }
    if(_param_1_str != '')
            format_args += '    ${'+_param_1_str+'}';
    if(_param_2_str != '')
            format_args += '    ${'+_param_2_str+'}';
    if(is_fake_checkbox)
        format_args += '    ${class_checked}';
    if(format_args != '')
        _generated_file.write('\r\n    ${locator}    Format String    ${locator}' + format_args);
}

var kw_dict = {};
var warning_list = [];

function ProcessRowData(row, id_col, locator_col, type_col, index_extract_col, lang_vi_col, lang_en_col, param_1_col, convert_case_1_col, param_2_col, convert_case_2_col, module_id_col, prepare_kws_col, _generated_file)
{
    //Read cell data as string
    var id_str = str(row[module_id_col]) + ' ' + str(row[id_col]);
    id_str = id_str.trim();
    id_str = id_str.replace(/\s+/g,' ')
    var locator_str = str(row[locator_col]).trim().replace(/, '/g,',\'');
    var type_str = str(row[type_col]).trim();
    var index_extract = parseInt(row[index_extract_col]);
    var lang_vi_str = str(row[lang_vi_col]).trim();
    var lang_en_str = str(row[lang_en_col]).trim();
    var param_1_str = str(row[param_1_col]);
    var convert_case_1_str = str(row[convert_case_1_col]);
    var param_2_str = str(row[param_2_col]);
    var convert_case_2_str = str(row[convert_case_2_col]);
    var prepare_kws_str = prepare_kws_col<0?'':str(row[prepare_kws_col]).trim();

    if(locator_str==''||id_str=='')
        return;

    var args_str = '';
    if(param_1_str != '')
        args_str += '    ${'+param_1_str+'}';
    if(param_2_str != '')
        args_str += '    ${'+param_2_str+'}';

    kw_dict[id_str] = (kw_dict[id_str]===undefined)?1:kw_dict[id_str]+1;

    if(type_str != 'WaitElement')
    {
        _generated_file.write('\r\n' + prefix_str + 'GetLocator ' + id_str);
        if(args_str != '')
            _generated_file.write('\r\n    [Arguments]' + args_str);
        _generated_file.write('\r\n    ${locator}    Set Variable    ' +  locator_str);
        InjectCodeCheckLanguage(lang_vi_str, lang_en_str, _generated_file);
        InjectCodeInsertParam(lang_vi_str, param_1_str, convert_case_1_str, param_2_str, convert_case_2_str, _generated_file);
        if(type_str == 'ClickText')
        {
          _generated_file.write('\r\n    [Return]    ${locator}    ${lang_str}');
        }
        else
        {
          _generated_file.write('\r\n    [Return]    ${locator}');
        }
        _generated_file.write('\r\n');
    }
    else
    {
        args_str += '    ${wait_time_out}=20s';
        _generated_file.write('\r\n' + prefix_str + 'WaitVisible ' + id_str);
        _generated_file.write('\r\n    [Arguments]' + args_str);
        _generated_file.write('\r\n    ${locator}    Set Variable    ' +  locator_str);
        InjectCodeCheckLanguage(lang_vi_str, lang_en_str, _generated_file);
        InjectCodeInsertParam(lang_vi_str, param_1_str, convert_case_1_str, param_2_str, convert_case_2_str, _generated_file);
        _generated_file.write('\r\n    KV Wait Until Page Contains Element    ${locator}    ${wait_time_out}');
        _generated_file.write('\r\n    KV Wait Until Element Is Visible    ${locator}    ${wait_time_out}');
        _generated_file.write('\r\n');
        _generated_file.write('\r\n' + prefix_str + 'WaitNotVisible ' + id_str);
        _generated_file.write('\r\n    [Arguments]' + args_str + '    ${visible_time_out}=0.5');
        _generated_file.write('\r\n    ${locator}    Set Variable    ' +  locator_str);
        InjectCodeCheckLanguage(lang_vi_str, lang_en_str, _generated_file);
        InjectCodeInsertParam(lang_vi_str, param_1_str, convert_case_1_str, param_2_str, convert_case_2_str, _generated_file);
        _generated_file.write('\r\n    Run Keyword And Return Status    Wait Until Element Is Visible    ${locator}    timeout=${visible_time_out}');
        _generated_file.write('\r\n    Wait Until Page Does Not Contain Element    ${locator}    timeout=${wait_time_out}');
        _generated_file.write('\r\n');
    }

    if(type_str != 'GetLocator' && type_str != 'WaitElement')
    {
        _generated_file.write('\r\n' + prefix_str + id_str);
        if(type_str == 'Checkbox')
        {
            _args_str = args_str ;
            _args_str += '    ${is_wait_visible}=True    ${wait_time_out}=20s';
            _generated_file.write('\r\n    [Arguments]' + _args_str);
            _generated_file.write('\r\n    ${locator}    ' + prefix_str + 'GetLocator ' + id_str + args_str);
            if(prepare_kws_str!='')
                _generated_file.write('\r\n    ' + prepare_kws_str);
                _generated_file.write('\r\n    Run Keyword If    \'${is_wait_visible}\' == \'True\'    KV Wait Until Page Contains Element    ${locator}    ${wait_time_out}');
                _generated_file.write('\r\n    Run Keyword If    \'${is_wait_visible}\' == \'True\'    KV Wait Until Element Is Visible    ${locator}    ${wait_time_out}');
                _generated_file.write('\r\n    KV Click Element    ${locator}');
        }
        else if(type_str == 'InputText')
        {
            _args_str = args_str + '    ${text}    ${is_clear_text}=True';
            _args_str += '    ${is_wait_visible}=True    ${wait_time_out}=${20}';
            _generated_file.write('\r\n    [Arguments]' + _args_str);
            _generated_file.write('\r\n    ${locator}    ' + prefix_str + 'GetLocator ' + id_str + args_str);
            if(prepare_kws_str!='')
                _generated_file.write('\r\n    ' + prepare_kws_str);
                _generated_file.write('\r\n    Run Keyword If    \'${is_wait_visible}\' == \'True\'    KV Wait Until Page Contains Element    ${locator}    ${wait_time_out}');
                _generated_file.write('\r\n    Run Keyword If    \'${is_wait_visible}\' == \'True\'    KV Wait Until Element Is Visible    ${locator}    ${wait_time_out}');
                _generated_file.write('\r\n    KV Input Text   ${locator}    ${text}    ${is_clear_text}');
        }
        else if(type_str == 'Switch')
        {
            _args_str = args_str + '    ${is_wait_visible}=True    ${wait_time_out}=${20}';
            if(_args_str != '')
                _generated_file.write('\r\n    [Arguments]' + _args_str);
            _generated_file.write('\r\n    ${locator}    ' + prefix_str + 'GetLocator ' + id_str + args_str);
            if(prepare_kws_str!='')
                _generated_file.write('\r\n    ' + prepare_kws_str);
                _generated_file.write('\r\n    Run Keyword If    \'${is_wait_visible}\' == \'True\'    KV Wait Until Page Contains Element    ${locator}    ${wait_time_out}');
                _generated_file.write('\r\n    Run Keyword If    \'${is_wait_visible}\' == \'True\'    KV Wait Until Element Is Visible    ${locator}    ${wait_time_out}');
                _generated_file.write('\r\n    ${get_text}    Get Text    ${locator}');
                _generated_file.write('\r\n    Run Keyword If    \'${get_text}\' == \'OFF\' or \'${get_text}\' == \'TẮT\'     KV Click Element    ${locator}');
        }
        else if(type_str == 'ExtractNums')
        {
            if(isNaN(index_extract))
            {
                warning_list.push('\x1b[33m Warning! Keyword \''+id_str+'\' - ExtractNums cant parse as integer!');
                index_extract=0;
            }
            _args_str = args_str + '    ${is_wait_visible}=True    ${wait_time_out}=20s    ${defaul_value}=${-1}';
            if(_args_str != '')
                _generated_file.write('\r\n    [Arguments]' + _args_str);
            _generated_file.write('\r\n    ${locator}    ' + prefix_str + 'GetLocator ' + id_str + args_str);
            if(prepare_kws_str!='')
                _generated_file.write('\r\n    ' + prepare_kws_str);
                _generated_file.write('\r\n    Run Keyword If    \'${is_wait_visible}\' == \'True\'    KV Wait Until Page Contains Element    ${locator}    ${wait_time_out}');
                _generated_file.write('\r\n    Run Keyword If    \'${is_wait_visible}\' == \'True\'    KV Wait Until Element Is Visible    ${locator}    ${wait_time_out}');
                _generated_file.write('\r\n    ${str}    Get Text    ${locator}');
                _generated_file.write('\r\n    ${number}    KV Extract number from string    ${str}    ${' + index_extract + '}    ${defaul_value}');
                _generated_file.write('\r\n    [Return]    ${number}');
        }
        else if(type_str == 'Dropdown')
        {
            _args_str = args_str + '    ${cell_locator}    ${is_wait_visible}=True    ${wait_time_out}=20s';
            if(_args_str != '')
                _generated_file.write('\r\n    [Arguments]' + _args_str);
            _generated_file.write('\r\n    ${locator}    ' + prefix_str + 'GetLocator ' + id_str + args_str);
            if(prepare_kws_str!='')
                _generated_file.write('\r\n    ' + prepare_kws_str);
            _generated_file.write('\r\n    KV Select Cell in Dropdown    ${locator}    ${cell_locator}    ${is_wait_visible}    ${wait_time_out}');
        }
        else if(type_str == 'UploadFile')
        {
            _args_str = args_str + '    ${files}';
            _args_str += '    ${is_wait_visible}=True    ${wait_time_out}=20s';
            if(_args_str != '')
                _generated_file.write('\r\n    [Arguments]' + _args_str);
            _generated_file.write('\r\n    ${locator}    ' + prefix_str + 'GetLocator ' + id_str + args_str);
            if(prepare_kws_str!='')
                _generated_file.write('\r\n    ' + prepare_kws_str);
            _generated_file.write('\r\n    KV Upload Files    ${locator}    ${files}    ${is_wait_visible}    ${wait_time_out}');
        }
        else if(type_str == 'ClickText')
        {
            _args_str = args_str + '    ${is_wait_visible}=True    ${wait_time_out}=20s';
            if(_args_str != '')
                _generated_file.write('\r\n    [Arguments]' + _args_str);
            _generated_file.write('\r\n    ${locator}    ${lang_str}    ' + prefix_str + 'GetLocator ' + id_str + args_str);
            if(prepare_kws_str!='')
                _generated_file.write('\r\n    ' + prepare_kws_str);
                _generated_file.write('\r\n    Run Keyword If    \'${is_wait_visible}\' == \'True\'    KV Wait Until Page Contains Element    ${locator}    ${wait_time_out}');
                _generated_file.write('\r\n    Run Keyword If    \'${is_wait_visible}\' == \'True\'    KV Wait Until Element Is Visible    ${locator}    ${wait_time_out}');
                _generated_file.write('\r\n    KV Click Text    ${lang_str}');
        }
        else
        {
            _args_str = args_str + '    ${is_wait_visible}=True    ${wait_time_out}=20s';
            if(_args_str != '')
                _generated_file.write('\r\n    [Arguments]' + _args_str);
            _generated_file.write('\r\n    ${locator}    ' + prefix_str + 'GetLocator ' + id_str + args_str);
            if(prepare_kws_str!='')
                _generated_file.write('\r\n    ' + prepare_kws_str);
                _generated_file.write('\r\n    Run Keyword If    \'${is_wait_visible}\' == \'True\'    KV Wait Until Page Contains Element    ${locator}    ${wait_time_out}');
                _generated_file.write('\r\n    Run Keyword If    \'${is_wait_visible}\' == \'True\'    KV Wait Until Element Is Visible    ${locator}    ${wait_time_out}');
                _generated_file.write('\r\n    KV Click Element    ${locator}');
        }
        _generated_file.write('\r\n');
    }
}

// Load client secrets from a local file.
fs.readFile('credentials.json', (err, content) => {
  if (err) return console.log('Error loading client secret file:', err);
  // Authorize a client with credentials, then call the Google Sheets API.
  authorize(JSON.parse(content), updateFnbElements);
});
